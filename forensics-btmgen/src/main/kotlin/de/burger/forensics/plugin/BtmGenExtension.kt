package de.burger.forensics.plugin

import org.gradle.api.model.ObjectFactory
import org.gradle.api.provider.ListProperty
import org.gradle.api.provider.Property
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.ProjectLayout
import javax.inject.Inject

abstract class BtmGenExtension @Inject constructor(
    objects: ObjectFactory,
    layout: ProjectLayout
) {
    val srcDirs: ListProperty<String> = objects.listProperty(String::class.java)
    // Legacy single prefix kept for backward-compat; if non-empty it will be merged into pkgPrefixes
    val pkgPrefix: Property<String> = objects.property(String::class.java)
    val pkgPrefixes: ListProperty<String> = objects.listProperty(String::class.java)
    val helperFqn: Property<String> = objects.property(String::class.java)
    val entryExit: Property<Boolean> = objects.property(Boolean::class.java)
    val trackedVars: ListProperty<String> = objects.listProperty(String::class.java)
    val includeJava: Property<Boolean> = objects.property(Boolean::class.java)
    val includeTimestamp: Property<Boolean> = objects.property(Boolean::class.java)
    val include: ListProperty<String> = objects.listProperty(String::class.java)
    val exclude: ListProperty<String> = objects.listProperty(String::class.java)
    val parallelism: Property<Int> = objects.property(Int::class.java)
    val shardsProperty: Property<Int> = objects.property(Int::class.java)
    val gzipOutputProperty: Property<Boolean> = objects.property(Boolean::class.java)
    val filePrefixProperty: Property<String> = objects.property(String::class.java)
    val rotateMaxBytesPerFileProperty: Property<Long> = objects.property(Long::class.java)
    val rotateIntervalSecondsProperty: Property<Long> = objects.property(Long::class.java)
    val flushThresholdBytesProperty: Property<Int> = objects.property(Int::class.java)
    val flushIntervalMillisProperty: Property<Long> = objects.property(Long::class.java)
    val writerThreadSafeProperty: Property<Boolean> = objects.property(Boolean::class.java)
    val minBranchesPerMethod: Property<Int> = objects.property(Int::class.java)
    val safeMode: Property<Boolean> = objects.property(Boolean::class.java)
    val forceHelperForWhitelist: Property<Boolean> = objects.property(Boolean::class.java)
    val maxFileBytes: Property<Long> = objects.property(Long::class.java)
    val useAstScanner: Property<Boolean> = objects.property(Boolean::class.java)
    val outputDir: DirectoryProperty = objects.directoryProperty()
    /**
     * Maximum number of characters allowed when embedding source snippets or values into
     * generated Byteman rules.
     *
     * If a string exceeds this limit, it will be truncated to the specified length and suffixed
     * with an ellipsis (â€¦). This helps prevent extremely large rules when very long expressions
     * or lines are encountered in source files.
     *
     * Set to 0 to disable truncation (default).
     */
    val maxStringLength: Property<Int> = objects.property(Int::class.java)

    init {
        srcDirs.convention(listOf("src/main/java", "src/main/kotlin"))
        pkgPrefix.convention("")
        pkgPrefixes.convention(emptyList())
        helperFqn.convention("de.burger.forensics.ForensicsHelper")
        entryExit.convention(true)
        trackedVars.convention(emptyList())
        includeJava.convention(true)
        includeTimestamp.convention(false)
        include.convention(emptyList())
        exclude.convention(emptyList())
        parallelism.convention(Runtime.getRuntime().availableProcessors().coerceAtLeast(1))
        shardsProperty.convention(Runtime.getRuntime().availableProcessors().coerceAtLeast(1))
        gzipOutputProperty.convention(false)
        filePrefixProperty.convention("tracing-")
        rotateMaxBytesPerFileProperty.convention(4L * 1024 * 1024)
        rotateIntervalSecondsProperty.convention(0L)
        flushThresholdBytesProperty.convention(64 * 1024)
        flushIntervalMillisProperty.convention(2000L)
        writerThreadSafeProperty.convention(false)
        minBranchesPerMethod.convention(0)
        outputDir.convention(layout.buildDirectory.dir("forensics"))
        maxStringLength.convention(0)
        safeMode.convention(false)
        forceHelperForWhitelist.convention(false)
        maxFileBytes.convention(2_000_000L)
        useAstScanner.convention(true)
    }

    var shards: Int
        get() = shardsProperty.orNull ?: Runtime.getRuntime().availableProcessors().coerceAtLeast(1)
        set(value) {
            shardsProperty.set(value)
        }

    var gzipOutput: Boolean
        get() = gzipOutputProperty.orNull ?: false
        set(value) {
            gzipOutputProperty.set(value)
        }

    var filePrefix: String
        get() = filePrefixProperty.orNull ?: "tracing-"
        set(value) {
            filePrefixProperty.set(value)
        }

    var rotateMaxBytesPerFile: Long
        get() = rotateMaxBytesPerFileProperty.orNull ?: 4L * 1024 * 1024
        set(value) {
            rotateMaxBytesPerFileProperty.set(value)
        }

    var rotateIntervalSeconds: Long
        get() = rotateIntervalSecondsProperty.orNull ?: 0L
        set(value) {
            rotateIntervalSecondsProperty.set(value)
        }

    var flushThresholdBytes: Int
        get() = flushThresholdBytesProperty.orNull ?: 64 * 1024
        set(value) {
            flushThresholdBytesProperty.set(value)
        }

    var flushIntervalMillis: Long
        get() = flushIntervalMillisProperty.orNull ?: 2000L
        set(value) {
            flushIntervalMillisProperty.set(value)
        }

    var writerThreadSafe: Boolean
        get() = writerThreadSafeProperty.orNull ?: false
        set(value) {
            writerThreadSafeProperty.set(value)
        }
}
