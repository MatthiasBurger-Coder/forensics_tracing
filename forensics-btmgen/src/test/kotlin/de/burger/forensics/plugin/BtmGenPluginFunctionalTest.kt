package de.burger.forensics.plugin

import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test
import java.io.File
import java.nio.file.Files

class BtmGenPluginFunctionalTest {

    @Test
    fun explicitTaskRegistration_defaultHeaderHasNoTimestamp() {
        val projectDir = Files.createTempDirectory("btmgen-plugin-test1").toFile().apply { deleteOnExit() }
        writeSettings(projectDir)
        writeBuildScript(projectDir, includeTimestamp = false)
        writeMinimalSource(projectDir)

        val result = GradleRunner.create()
            .withProjectDir(projectDir)
            .withArguments("generateBtmRules", "--stacktrace")
            .withPluginClasspath()
            .build()

        val task = result.task(":generateBtmRules")
        assertEquals(TaskOutcome.SUCCESS, task?.outcome, "generateBtmRules should succeed")

        val outputDir = File(projectDir, "build/forensics")
        val outputFiles = outputDir.listFiles { _, name ->
            name.startsWith("tracing-") && name.endsWith(".btm")
        }?.sortedBy { it.name }
        assertTrue(!outputFiles.isNullOrEmpty(), "Byteman output should be generated")

        val output = outputFiles!!.first().readText()
        assertTrue(output.lines().first().contains("Generated by de.burger.forensics.btmgen"),
            "Default header should not contain timestamp")
        assertTrue(!output.contains("Generated at"), "Timestamp should be omitted by default for cacheability")
    }

    @Test
    fun explicitTaskRegistration_includeTimestampTrue_addsTimestamp() {
        val projectDir = Files.createTempDirectory("btmgen-plugin-test2").toFile().apply { deleteOnExit() }
        writeSettings(projectDir)
        writeBuildScript(projectDir, includeTimestamp = true)
        writeMinimalSource(projectDir)

        val result = GradleRunner.create()
            .withProjectDir(projectDir)
            .withArguments("generateBtmRules", "--stacktrace")
            .withPluginClasspath()
            .build()

        val task = result.task(":generateBtmRules")
        assertEquals(TaskOutcome.SUCCESS, task?.outcome, "generateBtmRules should succeed")

        val outputDir = File(projectDir, "build/forensics")
        val outputFiles = outputDir.listFiles { _, name ->
            name.startsWith("tracing-") && name.endsWith(".btm")
        }?.sortedBy { it.name }
        assertTrue(!outputFiles.isNullOrEmpty(), "Byteman output should be generated")

        val output = outputFiles!!.first().readText()
        assertTrue(output.lines().first().contains("Generated at"),
            "Header should include timestamp when includeTimestamp=true")
    }

    private fun writeSettings(projectDir: File) {
        File(projectDir, "settings.gradle.kts").writeText(
            "rootProject.name = \"sample-project\"\n"
        )
    }

    private fun writeBuildScript(projectDir: File, includeTimestamp: Boolean) {
        File(projectDir, "build.gradle.kts").writeText(
            """
            plugins {
                id("de.burger.forensics.btmgen")
            }

            repositories { mavenCentral() }

            // Explicitly register the task; plugin does not auto-create it anymore
            tasks.register<de.burger.forensics.plugin.GenerateBtmTask>("generateBtmRules") {
                // Configure explicitly to avoid relying on extension wiring
                srcDirs.set(listOf("src/main/kotlin", "src/main/java"))
                packagePrefix.set("")
                helperFqn.set("de.burger.forensics.ForensicsHelper")
                entryExit.set(true)
                trackedVars.set(emptyList())
                includeJava.set(true)
                includeTimestamp.set($includeTimestamp)
                maxStringLength.set(0)
                pkgPrefixes.set(emptyList())
                includePatterns.set(emptyList())
                excludePatterns.set(emptyList())
                parallelism.set(Runtime.getRuntime().availableProcessors().coerceAtLeast(1))
                shards.set(Runtime.getRuntime().availableProcessors().coerceAtLeast(1))
                gzipOutput.set(false)
                filePrefix.set("tracing-")
                rotateMaxBytesPerFile.set(4L * 1024 * 1024)
                rotateIntervalSeconds.set(0)
                flushThresholdBytes.set(64 * 1024)
                flushIntervalMillis.set(2000)
                writerThreadSafe.set(false)
                minBranchesPerMethod.set(0)
                safeMode.set(false)
                forceHelperForWhitelist.set(false)
                maxFileBytes.set(2_000_000)
                useAstScanner.set(true)
                outputDir.set(layout.buildDirectory.dir("forensics"))
            }
            """.trimIndent()
        )
    }

    private fun writeMinimalSource(projectDir: File) {
        val sourceDir = File(projectDir, "src/main/kotlin")
        sourceDir.mkdirs()
        File(sourceDir, "TopLevel.kt").writeText(
            """
            fun hello(name: String): String {
                return "Hello, ${'$'}name"
            }
            """.trimIndent()
        )
    }
}
